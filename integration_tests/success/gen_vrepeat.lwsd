let aux = rec(self : (q : Nat) -> {p : Nat} -> &(Vec %p) -> &(Vec %(p * q))) ->
  fun(m : Nat) -> fun{n : Nat} -> fun(e : &(Vec %n)) ->
    if m <= 0 then
      &[| |]
    else
      &(~gen_vconcat ~e ~(self (m - 1) e))
in
let gen_vrepeat =
  fun(m : Nat) -> fun{n : Nat} -> &(fun(v : Vec %n) -> ~(aux m &v))
in
&(~(gen_vrepeat 5) [| 4; 6; 9 |])
