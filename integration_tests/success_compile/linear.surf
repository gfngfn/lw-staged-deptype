let learning_rate = Tensor.f 1.0 in
let ws = Tensor.zeros (let open MnistHelper in [image_dim, label_count]) in
let bs = Tensor.zeros (let open MnistHelper in [label_count]) in
let model {n : Nat} (xs : Tensor [n, MnistHelper.image_dim]) =
  let open Tensor in
  mm xs ws + bs
in
List.iter (fun(i : Int) ->
  let loss =
    Tensor.cross_entropy_for_logits _ {MnistHelper.label_count}
      (model MnistHelper.train_images)
      MnistHelper.train_labels
  in
  Tensor.backward loss;
  Tensor.no_grad (fun(u : Unit) ->
    let open Tensor in
    ws -= grad ws * learning_rate;
    bs -= grad bs * learning_rate
  );
  Tensor.zero_grad ws;
  Tensor.zero_grad bs;
  let got = model MnistHelper.test_images in
  let estimated = Tensor.argmax 1 got in
  let test_accuracy =
    let sum = Tensor.count_equal estimated MnistHelper.test_labels in
    float sum / float MnistHelper.num_test_images
  in
  print_float test_accuracy
) (range 1 200)
