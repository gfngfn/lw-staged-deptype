let aux = rec(self : (p : Nat) -> (q : Nat) -> &(Vec %p) -> &(Vec %(p * q))) ->
  fun(n : Nat) -> fun(m : Nat) -> fun(e : &(Vec %n)) ->
    if m <= 0 then
      &[| |] as &(Vec %(n * m))
    else
      &(~(gen_vconcat n (n * (m - 1))) ~e ~(self n (m - 1) e))
in
let gen_vrepeat =
  fun(n : Nat) -> fun(m : Nat) -> &(fun(v : Vec %n) -> ~(aux n m &v))
in
&(~(gen_vrepeat 3 5) [| 4; 6; 9 |])
