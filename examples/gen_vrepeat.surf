let aux = rec(self : (p : Int) -> (q : Int) -> Vec p -> Vec (p * q)) -> fun(n : Int) -> fun(m : Int) -> fun(e : Vec n) ->
  if m <= 0 then
    [| |] as Vec (n * m)
  else
    vconcat n (n * (m - 1)) e (self n (m - 1) e)
in
let vrepeat = fun(n : Int) -> fun(m : Int) -> fun(v : Vec n) -> aux n m v in
vrepeat 3 5 [| 4; 6; 9 |]
