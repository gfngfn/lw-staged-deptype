&(let learning_rate = Tensor.f 1.0 in
  let ws = ~(Tensor.gen_zeros (let open MnistHelper in [image_dim, label_count])) in
  let bs = ~(Tensor.gen_zeros (let open MnistHelper in [label_count])) in
~(let gen_model {n : Nat} =
    &(fun(xs : Tensor %[n, MnistHelper.image_dim]) ->
      let open Tensor in
      ~gen_add (~gen_mm xs ws) bs
    )
  in
&(List.iter (fun(i : Int) ->
    let loss =
      ~(Tensor.gen_cross_entropy_for_logits _ {MnistHelper.label_count})
        (~gen_model MnistHelper.train_images)
        MnistHelper.train_labels
    in
    Tensor.backward loss;
    Tensor.no_grad (fun(u : Unit) ->
      let open Tensor in
      ~gen_sub_update ws (~gen_mult (~gen_grad ws) learning_rate);
      ~gen_sub_update bs (~gen_mult (~gen_grad bs) learning_rate)
    );
    ~Tensor.gen_zero_grad ws;
    ~Tensor.gen_zero_grad bs;
    let got = ~gen_model MnistHelper.test_images in
    let estimated = ~(Tensor.gen_argmax 1) got in
    let test_accuracy =
      let sum = ~Tensor.gen_count_equal estimated MnistHelper.test_labels in
      float sum / float MnistHelper.num_test_images
    in
    print_float test_accuracy
  ) (range 1 200)
)))
