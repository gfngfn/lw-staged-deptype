val %( + ) : Int -> Int -> Int external "int_add" "+"
val %( - ) : Int -> Int -> Int external "int_sub" "-"
val %( * ) : Int -> Int -> Int external "int_mult" "*"
val %( <= ) : Int -> Int -> Bool external "int_leq" "<="
val ~gen_vadd : {a : Nat} -> &(Vec %a -> Vec %a -> Vec %a) external "gen_vadd" "vadd"
val ~gen_vconcat : {a : Nat} -> {b : Nat} -> &(Vec %a -> Vec %b -> Vec %(a + b)) external "gen_vconcat" "vconcat"
val ~gen_mtranspose : {a : Nat} -> {b : Nat} -> &(Mat %a %b -> Mat %b %a) external "gen_mtranspose" "mtranspose"
val ~gen_mmult : {a : Nat} -> {b : Nat} -> {c : Nat} -> &(Mat %a %b -> Mat %b %c -> Mat %a %c) external "gen_mmult" "mmult"
val ~gen_mconcat_vert : {a : Nat} -> {b : Nat} -> {c : Nat} -> &(Mat %a %c -> Mat %b %c -> Mat %(a + b) %c) external "gen_mconcat_vert" "mconcat_vert"
val ~drop_at : List Nat -> Nat -> List Nat external "drop_at" "drop_at"

module Tensor : sig
  val ~gen_zeros : (shape : List Nat) -> &(Tensor %shape) external "tensor__gen_zeros" "zeros"
  val ~gen_zero_grad : {shape : List Nat} -> &(Tensor %shape -> Unit) external "tensor__gen_zero_grad" "zero_grad"
  val ~gen_sub_update : {shape : List Nat} -> &(Tensor %shape -> Tensor %shape -> Unit) external "tensor__gen_sub_update" "-="
  val ~gen_argmax : {shape : List Nat} -> (dim : Nat) -> &(Tensor %shape -> Tensor %(drop_at shape dim)) external "tensor__gen_argmax" "argmax"
  val f : Float -> Tensor %([] as List Nat) external "tensor__f" "f"
  val backward : Tensor %([] as List Nat) -> Unit external "tensor__backward" "backward"
  val no_grad : (Unit -> Unit) -> Unit external "tensor__no_grad" "no_grad"
  val float_value : Tensor %([] as List Nat) -> Float external "tensor__float_value" "float_value"
  val ~gen_tadd : {shape : List Nat} -> &(Tensor %shape -> Tensor %shape -> Tensor %shape) external "gen_tadd" "tadd"
end

module Mnist_helper : sig
  val ~image_dim : Nat external "mnist_helper__image_dim" "image_dim"
  val ~label_count : Nat external "mnist_helper__label_count" "label_count"
end
